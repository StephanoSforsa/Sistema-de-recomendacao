# -*- coding: utf-8 -*-
"""Dinamica.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DldZ6vEArtPNwHq3D4VVaL5lqDU8mHOX

# Modelos de recomendações:

##Modelo de recomendação por avaliação:

###Carregando as bases e analisando:
"""

import pandas as pd

dnc_order_reviews = pd.read_csv('/content/DNC_order_reviews_dataset.csv',index_col=0)
dnc_order_items = pd.read_csv('/content/DNC_order_items_dataset.csv',index_col=0)
dnc_orders = pd.read_csv('/content/DNC_orders_dataset.csv',index_col=0)
dnc_products = pd.read_csv('/content/DNC_products_dataset.csv',index_col=0)

dnc_order_reviews.head()

dnc_order_items.head()

dnc_orders.head()

dnc_products.head()

"""###Tratamento de nulos, caso presentes:"""

dnc_order_reviews.info()

dnc_order_items.info()

dnc_orders.info()

dnc_products.info()

dnc_products.isnull().sum()

dnc_products = dnc_products.dropna()

df_principal = dnc_orders[dnc_orders['order_status'] == 'delivered']

df_principal = pd.merge(df_principal,dnc_order_reviews, how='inner', on='order_id')

df_principal.head()

df_principal.shape

"""###Montando o dataframe principal com as informações necessárias para o modelo:"""

dnc_order_items.columns

item_id = dnc_order_items[['order_id','product_id','order_item_id']]

df_principal = pd.merge(df_principal,item_id, how='left', on='order_id')

df_principal.shape

df_principal = df_principal.drop_duplicates('order_id')

dnc_products.columns

categorias = dnc_products[['product_id', 'product_category_name']]

df_principal = pd.merge(df_principal,categorias, how='left', on='product_id')

df_principal["product_category_name"] = df_principal["product_category_name"].astype('category')

df_principal["cat_codes"] = df_principal["product_category_name"].cat.codes

df_principal

df_principal['cat_codes']

df_principal['cat_codes'] = df_principal['cat_codes'].replace(0,73)

df_principal['cat_codes'] = df_principal['cat_codes'].replace(-1,74)

df_principal

df_principal = df_principal[['customer_id','product_id', 'review_score','order_id', 'order_status', 'review_id', 'order_item_id', 'product_category_name', 'cat_codes']]

df_principal

df_principal['review_score'].unique()

df_principal

df_principal = df_principal.dropna()

df_principal.info()

df_principal

df_principal.columns

"""###Filtrando o dataframe principal pelo número de avaliações de produtos. Adotamos um limite para analisar somente produtos que foram analisados mais de 10 vezes."""

contagem = pd.DataFrame(teste['product_id'].value_counts())

contagem = contagem.rename({'product_id':'contagem'},axis=1)

contagem['product_id'] = contagem.index

contagem = contagem.reset_index(drop=True)

df_principal = pd.merge(df_principal,contagem, how = 'left', on='product_id')

df_selecionados = df_principal[df_principal['contagem']>10]

df_selecionados.info()

"""### Transposição de linhas(customer_id) em colunas:"""

pivot_table = df_selecionados.pivot_table(columns='customer_id', index='product_id', values="review_score")

pivot_table

pivot_table.fillna(0, inplace=True)

pivot_table.shape

pivot_table

"""### Rodando o modelo com o NearestNeighbors:"""

from scipy.sparse import csr_matrix
book_sparse = csr_matrix(pivot_table)

from sklearn.neighbors import NearestNeighbors
model = NearestNeighbors(algorithm='brute')
model.fit(book_sparse)

"""###Avaliando as recomendações do modelo para o primeiro cliente:"""

distances, suggestions = model.kneighbors(pivot_table.iloc[0, :].values.reshape(1, -1))

pivot_table

recomendados = []
for i in range(len(suggestions)):
  recomendados= list(pivot_table.index[suggestions[i]])

for prod in recomendados:
  print('Produto:',prod +', da categoria:',df_principal['product_category_name'][df_principal['product_id']==prod].unique()[0])